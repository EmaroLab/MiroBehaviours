<launch>

<!-- remember to launch mosquitto and to connect the smartphone prior to launch this -->

<!-- ROBOT TO BE USED --> 
<!-- Choose if you want to use a simulated robot (sim01) in gazebo or the real miro (rob01) -->
    <param name="/robot_name" value="sim01" />

<!-- NODE RATE -->
    <param name="rate" value="200" />

<!-- MIRO GAZEBO_ROS -->
    <!-- choose a world from the miro_gazebo_ros/worlds directory -->  

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find miro_gazebo_ros)/worlds/my_world_easy_ob.world" />
    </include>


<!-- GESTURE BASED BEHAVIOUR -->

    <!-- MQTT BRIDGE -->
    <include file="$(find mqtt_ros_bridge)/launch/imu_bridge.launch" />


    <!-- IMU COMPLEMANTARY FILTER -->
    <node name="imu_complementary_filter" pkg="imu_complementary_filter" type="complementary_filter_node"/>

    <node name="rad2deg" pkg="gb_control" type="rad2deg.py" />

    <node name="gb_control_to_coordination" pkg="gb_control" type="gb_control_to_coordination.py">
            
        <!-- Choose wich kind of control you want to use with the smartwatch -->
        <param name="gb_control_type" value="attitude" />

    </node>

<!--    <node name="human_influence" pkg="gb_control" type="human_influence.py" /> -->


<!-- OBSTACLE AVOIDANCE BEHAVIOUR -->

    <!-- CHECK OBSTACLE SAFETY -->
    <node name="check_obstacle_safety" pkg="miro_oa_behaviour" type="check_obstacle_safety.py" />

    <!-- NEW OBSTACLE DETECTION -->
    <node name ="new_obstacle_detection" pkg="miro_oa_behaviour" type="new_obstacle_detection.py" />

    <!-- ODOMETRY PUBLISHER -->
    <node name="odometry_publisher" pkg="miro_oa_behaviour" type="odometry_publisher.py" />

    <!-- OBSTACLE AVOIDANCE TO COORDINATION-->
    <node name="obstacle_avoidance" pkg="miro_oa_behaviour" type="obstacle_avoidance_to_coordination.py" >
      <param name="drive_pattern" value="obstacle_avoidance" />
      <param name="x_threshold" value="0.2" />
      <param name="y_threshold" value="0.05" />
      <param name="th_threshold_first_rotation" value="0.05" />
      <param name="K_first_rotation" value="1" />
      <param name="d_ref_wall_following" value="0.5" />
      <param name="K_wall_following" value="1" />
      <param name="v_wall_following" value="100" />
    </node>

    <!-- SYNCHRONOUS OA BEHAVIOUR FLAG PUBLISHER -->
    <node name="synch_behaviour_pub" pkg="miro_oa_behaviour" type="synch_behaviour_pub.py" />

<!-- RVIZ VISUALIZATION -->
    <node name="rviz" pkg="rviz" type="rviz"
    args="-d $(find miro_oa_behaviour)/rviz/miro_obstacle_avoidance.rviz" />

<!-- COORDINATION-->
    <node name="coordination" pkg="coordination" type="coordination.py" /> 

<!-- IS SMARTWATCH PUBLISHING  --> 
    <node name="sw_is_pub" pkg="coordination" type="sw_is_pub.py" />
</launch>
